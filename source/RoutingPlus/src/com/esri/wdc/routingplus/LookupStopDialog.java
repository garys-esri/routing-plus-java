/*******************************************************************************
 * Copyright 2014 Esri
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 ******************************************************************************/
package com.esri.wdc.routingplus;

import com.esri.core.geometry.SpatialReference;
import com.esri.core.map.CallbackListener;
import com.esri.core.tasks.geocode.Locator;
import com.esri.core.tasks.geocode.LocatorFindParameters;
import com.esri.core.tasks.geocode.LocatorGeocodeResult;
import java.awt.event.KeyEvent;
import java.util.List;
import java.util.concurrent.Future;

public class LookupStopDialog extends javax.swing.JDialog {    
    
    private final Locator locator;
    
    private CallbackListener<List<LocatorGeocodeResult>> listener = null;
    private SpatialReference outSr = null;

    public LookupStopDialog(java.awt.Frame parent, boolean modal, SpatialReference outSr, CallbackListener<List<LocatorGeocodeResult>> listener) {
        super(parent, modal);
        initComponents();
        
        locator = Locator.createOnlineLocator();
        this.listener = listener;
        this.outSr = outSr;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField_place = new javax.swing.JTextField();
        jLabel_toast = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Place");

        jTextField_place.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField_placeKeyReleased(evt);
            }
        });

        jLabel_toast.setText(" ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_toast, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField_place, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField_place, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel_toast)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField_placeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_placeKeyReleased
        if (KeyEvent.VK_ENTER == evt.getKeyCode()) {
            LocatorFindParameters params = new LocatorFindParameters(jTextField_place.getText());
            params.setMaxLocations(1);
            params.setOutSR(outSr);
            Future<List<LocatorGeocodeResult>> future = locator.find(params, listener);
            try {
                List<LocatorGeocodeResult> results = future.get();
                if (0 < results.size()) {
                    jLabel_toast.setText("Found " + results.get(0).getAddress());
                    jTextField_place.selectAll();
                } else {
                    jLabel_toast.setText("No results");
                }
            } catch (Exception ex) {
                jLabel_toast.setText("Not found: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_jTextField_placeKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel_toast;
    private javax.swing.JTextField jTextField_place;
    // End of variables declaration//GEN-END:variables
}
